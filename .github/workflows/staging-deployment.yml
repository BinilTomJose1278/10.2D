name: Staging Deployment Pipeline

on:
  workflow_dispatch:
    inputs:
      image_sha:
        description: 'Image SHA to deploy'
        required: true
        default: 'latest'
  push:
    branches:
      - main

env:
  AZURE_CONTAINER_REGISTRY: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
  REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
  AZURE_RESOURCE_GROUP: ${{ secrets.STAGING_RESOURCE_GROUP }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

jobs:
  create-staging-infrastructure:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Use Existing Resource Group
      run: |
        echo "Using existing resource group: ${{ env.AZURE_RESOURCE_GROUP }}"

    - name: Use Existing PostgreSQL Database
      run: |
        echo "Using existing PostgreSQL server: ${{ secrets.POSTGRES_SERVER }}"
        echo "Staging will use the same PostgreSQL server as production"
        echo "Databases: customer_db, order_db, product_db"

    - name: Emergency Container Cleanup
      run: |
        echo "EMERGENCY CLEANUP: You have 11/10 containers - cleaning up ALL staging containers!"
        
        # Get current container count
        CURRENT_COUNT=$(az container list --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "length(@)")
        echo "Current container count: $CURRENT_COUNT/10"
        
        # Delete ALL staging containers (including any from current run that might exist)
        echo "Deleting ALL staging containers to free up quota..."
        
        # Get all staging containers
        STAGING_CONTAINERS=$(az container list --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "[?contains(name, 'staging-')].name" -o tsv)
        
        if [ -n "$STAGING_CONTAINERS" ]; then
          echo "Deleting staging containers:"
          echo "$STAGING_CONTAINERS"
          
          for container in $STAGING_CONTAINERS; do
            echo "Force deleting: $container"
            az container delete --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name $container --yes || true
          done
          
          echo "Waiting for deletion to complete..."
          sleep 150  # Wait longer for deletion
          
          # Check count after cleanup
          NEW_COUNT=$(az container list --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "length(@)")
          echo "Container count after emergency cleanup: $NEW_COUNT/10"
          
          if [ $NEW_COUNT -ge 8 ]; then
            echo "WARNING: Still too many containers. This deployment may fail."
          else
            echo "SUCCESS: Enough quota available for deployment"
          fi
        else
          echo "No staging containers found to delete"
        fi

    - name: Create Staging RabbitMQ
      run: |
        # Create RabbitMQ container instance
        az container create \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name staging-rabbitmq-${{ github.run_id }} \
          --image rabbitmq:3-management \
          --os-type Linux \
          --ports 5672 15672 \
          --environment-variables \
            RABBITMQ_DEFAULT_USER=guest \
            RABBITMQ_DEFAULT_PASS=guest \
          --cpu 1 \
          --memory 1 \
          --ip-address public

    - name: Create Staging Container Instances (Sequential)
      run: |
        # Use existing PostgreSQL server
        POSTGRES_HOST="${{ secrets.POSTGRES_SERVER }}"
        
        # Get RabbitMQ IP
        RABBITMQ_IP=$(az container show \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name staging-rabbitmq-${{ github.run_id }} \
          --query ipAddress.ip -o tsv)
        
        echo "Creating containers one at a time to avoid quota conflicts..."

        # Create Customer Service container (1st)
        echo "Creating Customer Service container..."
        az container create \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name staging-customer-service-${{ github.run_id }} \
          --image ${{ env.AZURE_CONTAINER_REGISTRY }}/customer-service:latest \
          --os-type Linux \
          --ports 8002 \
          --environment-variables \
            DATABASE_URL=postgresql://postgres:${{ secrets.POSTGRES_PASSWORD }}@$POSTGRES_HOST:5432/customer_db \
          --cpu 1 \
          --memory 1 \
          --registry-login-server ${{ env.AZURE_CONTAINER_REGISTRY }} \
          --registry-username ${{ env.REGISTRY_USERNAME }} \
          --registry-password ${{ env.REGISTRY_PASSWORD }} \
          --ip-address public
        
        echo "Customer Service container created successfully"
        sleep 10  # Wait between deployments

        # Create Product Service container (2nd)
        echo "Creating Product Service container..."
        az container create \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name staging-product-service-${{ github.run_id }} \
          --image ${{ env.AZURE_CONTAINER_REGISTRY }}/product-service:latest \
          --os-type Linux \
          --ports 8001 \
          --environment-variables \
            DATABASE_URL=postgresql://postgres:${{ secrets.POSTGRES_PASSWORD }}@$POSTGRES_HOST:5432/product_db \
            RABBITMQ_HOST=$RABBITMQ_IP \
            RABBITMQ_PORT=5672 \
            RABBITMQ_USER=guest \
            RABBITMQ_PASS=guest \
          --cpu 1 \
          --memory 1 \
          --registry-login-server ${{ env.AZURE_CONTAINER_REGISTRY }} \
          --registry-username ${{ env.REGISTRY_USERNAME }} \
          --registry-password ${{ env.REGISTRY_PASSWORD }} \
          --ip-address public
        
        echo "Product Service container created successfully"
        sleep 10  # Wait between deployments

        # Create Order Service container (3rd)
        echo "Creating Order Service container..."
        az container create \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name staging-order-service-${{ github.run_id }} \
          --image ${{ env.AZURE_CONTAINER_REGISTRY }}/order-service:latest \
          --os-type Linux \
          --ports 8003 \
          --environment-variables \
            DATABASE_URL=postgresql://postgres:${{ secrets.POSTGRES_PASSWORD }}@$POSTGRES_HOST:5432/order_db \
            CUSTOMER_SERVICE_URL=http://staging-customer-service-${{ github.run_id }}.eastus.azurecontainer.io:8002 \
            RABBITMQ_HOST=$RABBITMQ_IP \
            RABBITMQ_PORT=5672 \
            RABBITMQ_USER=guest \
            RABBITMQ_PASS=guest \
          --cpu 1 \
          --memory 1 \
          --registry-login-server ${{ env.AZURE_CONTAINER_REGISTRY }} \
          --registry-username ${{ env.REGISTRY_USERNAME }} \
          --registry-password ${{ env.REGISTRY_PASSWORD }} \
          --ip-address public
        
        echo "Order Service container created successfully"
        sleep 10  # Wait between deployments

        # Create Frontend container (4th)
        echo "Creating Frontend container..."
        az container create \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name staging-frontend-${{ github.run_id }} \
          --image ${{ env.AZURE_CONTAINER_REGISTRY }}/frontend:latest \
          --os-type Linux \
          --ports 80 \
          --cpu 1 \
          --memory 1 \
          --registry-login-server ${{ env.AZURE_CONTAINER_REGISTRY }} \
          --registry-username ${{ env.REGISTRY_USERNAME }} \
          --registry-password ${{ env.REGISTRY_PASSWORD }} \
          --ip-address public
        
        echo "Frontend container created successfully"
        echo "All staging containers created successfully!"

    - name: Wait for Services to be Ready
      run: |
        sleep 60
        echo "Services should be ready now"

    - name: Run Acceptance Tests
      run: |
        echo "Waiting for containers to start up..."
        sleep 120  # Wait 2 minutes for containers to fully start
        
        # Get service IPs
        CUSTOMER_IP=$(az container show \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name staging-customer-service-${{ github.run_id }} \
          --query ipAddress.ip -o tsv)
        
        PRODUCT_IP=$(az container show \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name staging-product-service-${{ github.run_id }} \
          --query ipAddress.ip -o tsv)
        
        ORDER_IP=$(az container show \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name staging-order-service-${{ github.run_id }} \
          --query ipAddress.ip -o tsv)
        
        FRONTEND_IP=$(az container show \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name staging-frontend-${{ github.run_id }} \
          --query ipAddress.ip -o tsv)

        echo "Service IPs:"
        echo "Customer Service: $CUSTOMER_IP:8002"
        echo "Product Service: $PRODUCT_IP:8001"
        echo "Order Service: $ORDER_IP:8003"
        echo "Frontend: $FRONTEND_IP:80"

        # Test health endpoints with retries
        echo "Testing service health endpoints..."
        
        # Test Customer Service with retry
        for i in {1..3}; do
          echo "Testing Customer Service (attempt $i)..."
          if curl -f --connect-timeout 10 --max-time 30 http://$CUSTOMER_IP:8002/health; then
            echo "Customer Service is healthy!"
            break
          else
            echo "Customer Service not ready, waiting 30 seconds..."
            sleep 30
          fi
        done
        
        # Test Product Service with retry
        for i in {1..3}; do
          echo "Testing Product Service (attempt $i)..."
          if curl -f --connect-timeout 10 --max-time 30 http://$PRODUCT_IP:8001/health; then
            echo "Product Service is healthy!"
            break
          else
            echo "Product Service not ready, waiting 30 seconds..."
            sleep 30
          fi
        done
        
        # Test Order Service with retry
        for i in {1..3}; do
          echo "Testing Order Service (attempt $i)..."
          if curl -f --connect-timeout 10 --max-time 30 http://$ORDER_IP:8003/health; then
            echo "Order Service is healthy!"
            break
          else
            echo "Order Service not ready, waiting 30 seconds..."
            sleep 30
          fi
        done
        
        # Test Frontend with retry
        for i in {1..3}; do
          echo "Testing Frontend (attempt $i)..."
          if curl -f --connect-timeout 10 --max-time 30 http://$FRONTEND_IP:80; then
            echo "Frontend is healthy!"
            break
          else
            echo "Frontend not ready, waiting 30 seconds..."
            sleep 30
          fi
        done

        echo "Staging deployment completed successfully!"
        echo "Service URLs:"
        echo "Frontend: http://$FRONTEND_IP:80"
        echo "Customer Service: http://$CUSTOMER_IP:8002"
        echo "Product Service: http://$PRODUCT_IP:8001"
        echo "Order Service: http://$ORDER_IP:8003"

    - name: Cleanup Staging Infrastructure
      if: always()
      run: |
        echo "Cleaning up staging containers to free quota for future deployments..."
        
        # Delete the staging containers we just created
        CONTAINER_NAMES="staging-rabbitmq-${{ github.run_id }} staging-customer-service-${{ github.run_id }} staging-product-service-${{ github.run_id }} staging-order-service-${{ github.run_id }} staging-frontend-${{ github.run_id }}"
        
        for container in $CONTAINER_NAMES; do
          echo "Deleting container: $container"
          az container delete --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name $container --yes || true
        done
        
        echo "Staging containers cleaned up successfully"
