name: Staging Deployment Pipeline

on:
  workflow_dispatch:
    inputs:
      image_sha:
        description: 'Image SHA to deploy'
        required: true
        default: 'latest'
  push:
    branches: [ main ]

env:
  AZURE_CONTAINER_REGISTRY: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
  REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  STAGING_RESOURCE_GROUP: ${{ secrets.STAGING_RESOURCE_GROUP }}
  LOCATION: eastus

jobs:
  create-staging-infrastructure:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Create Staging Resource Group
      run: |
        az group create --name ${{ env.STAGING_RESOURCE_GROUP }} --location ${{ env.LOCATION }}

    - name: Create Staging PostgreSQL
      run: |
        az postgres flexible-server create \
          --resource-group ${{ env.STAGING_RESOURCE_GROUP }} \
          --name staging-postgres-${{ github.run_id }} \
          --location ${{ env.LOCATION }} \
          --admin-user postgres \
          --admin-password ${{ secrets.POSTGRES_PASSWORD }} \
          --sku-name Standard_B1ms \
          --tier Burstable \
          --public-access 0.0.0.0 \
          --storage-size 32

        for DB in customer_db order_db product_db; do
          az postgres flexible-server db create \
            --resource-group ${{ env.STAGING_RESOURCE_GROUP }} \
            --server-name staging-postgres-${{ github.run_id }} \
            --database-name $DB
        done

    - name: Create Staging RabbitMQ (with DNS)
      run: |
        az container create \
          --resource-group ${{ env.STAGING_RESOURCE_GROUP }} \
          --name staging-rabbitmq-${{ github.run_id }} \
          --image rabbitmq:3-management \
          --ports 5672 15672 \
          --cpu 1 --memory 1 \
          --os-type Linux \
          --ip-address public \
          --dns-name-label staging-rmq-${{ github.run_id }} \
          --restart-policy Always

    - name: Create Staging ACIs (all :8000 + DNS)
      run: |
        POSTGRES_HOST=$(az postgres flexible-server show \
          --resource-group ${{ env.STAGING_RESOURCE_GROUP }} \
          --name staging-postgres-${{ github.run_id }} \
          --query fullyQualifiedDomainName -o tsv)

        # Compose FQDN for RMQ from label
        RABBITMQ_HOST=staging-rmq-${{ github.run_id }}.${{ env.LOCATION }}.azurecontainer.io

        # PRODUCT
        az container create \
          --resource-group ${{ env.STAGING_RESOURCE_GROUP }} \
          --name staging-product-service-${{ github.run_id }} \
          --image ${{ env.AZURE_CONTAINER_REGISTRY }}/product-service:${{ github.event.inputs.image_sha || github.sha }} \
          --ports 8000 \
          --cpu 1 --memory 1.5 \
          --os-type Linux \
          --ip-address public \
          --dns-name-label staging-product-${{ github.run_id }} \
          --environment-variables \
            POSTGRES_USER=postgres \
            POSTGRES_DB=product_db \
            POSTGRES_HOST=$POSTGRES_HOST \
            POSTGRES_PORT=5432 \
            RABBITMQ_HOST=$RABBITMQ_HOST \
            RABBITMQ_PORT=5672 \
            RABBITMQ_USER=guest \
          --secure-environment-variables \
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            RABBITMQ_PASS=guest \
          --registry-login-server ${{ env.AZURE_CONTAINER_REGISTRY }} \
          --registry-username ${{ env.REGISTRY_USERNAME }} \
          --registry-password ${{ env.REGISTRY_PASSWORD }} \
          --restart-policy Always

        # CUSTOMER
        az container create \
          --resource-group ${{ env.STAGING_RESOURCE_GROUP }} \
          --name staging-customer-service-${{ github.run_id }} \
          --image ${{ env.AZURE_CONTAINER_REGISTRY }}/customer-service:${{ github.event.inputs.image_sha || github.sha }} \
          --ports 8000 \
          --cpu 1 --memory 1.5 \
          --os-type Linux \
          --ip-address public \
          --dns-name-label staging-customer-${{ github.run_id }} \
          --environment-variables \
            POSTGRES_USER=postgres \
            POSTGRES_DB=customer_db \
            POSTGRES_HOST=$POSTGRES_HOST \
            POSTGRES_PORT=5432 \
            RABBITMQ_HOST=$RABBITMQ_HOST \
            RABBITMQ_PORT=5672 \
            RABBITMQ_USER=guest \
          --secure-environment-variables \
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            RABBITMQ_PASS=guest \
          --registry-login-server ${{ env.AZURE_CONTAINER_REGISTRY }} \
          --registry-username ${{ env.REGISTRY_USERNAME }} \
          --registry-password ${{ env.REGISTRY_PASSWORD }} \
          --restart-policy Always

        # ORDER (points to other services by FQDN)
        CUSTOMER_FQDN=staging-customer-${{ github.run_id }}.${{ env.LOCATION }}.azurecontainer.io
        PRODUCT_FQDN=staging-product-${{ github.run_id }}.${{ env.LOCATION }}.azurecontainer.io

        az container create \
          --resource-group ${{ env.STAGING_RESOURCE_GROUP }} \
          --name staging-order-service-${{ github.run_id }} \
          --image ${{ env.AZURE_CONTAINER_REGISTRY }}/order-service:${{ github.event.inputs.image_sha || github.sha }} \
          --ports 8000 \
          --cpu 1 --memory 1.5 \
          --os-type Linux \
          --ip-address public \
          --dns-name-label staging-order-${{ github.run_id }} \
          --environment-variables \
            POSTGRES_USER=postgres \
            POSTGRES_DB=order_db \
            POSTGRES_HOST=$POSTGRES_HOST \
            POSTGRES_PORT=5432 \
            RABBITMQ_HOST=$RABBITMQ_HOST \
            RABBITMQ_PORT=5672 \
            RABBITMQ_USER=guest \
            PRODUCT_SERVICE_URL=http://$PRODUCT_FQDN:8000 \
            CUSTOMER_SERVICE_URL=http://$CUSTOMER_FQDN:8000 \
          --secure-environment-variables \
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            RABBITMQ_PASS=guest \
          --registry-login-server ${{ env.AZURE_CONTAINER_REGISTRY }} \
          --registry-username ${{ env.REGISTRY_USERNAME }} \
          --registry-password ${{ env.REGISTRY_PASSWORD }} \
          --restart-policy Always

        # FRONTEND (with DNS)
        az container create \
          --resource-group ${{ env.STAGING_RESOURCE_GROUP }} \
          --name staging-frontend-${{ github.run_id }} \
          --image ${{ env.AZURE_CONTAINER_REGISTRY }}/frontend:${{ github.event.inputs.image_sha || github.sha }} \
          --ports 80 \
          --cpu 1 --memory 1 \
          --os-type Linux \
          --ip-address public \
          --dns-name-label staging-frontend-${{ github.run_id }} \
          --registry-login-server ${{ env.AZURE_CONTAINER_REGISTRY }} \
          --registry-username ${{ env.REGISTRY_USERNAME }} \
          --registry-password ${{ env.REGISTRY_PASSWORD }} \
          --restart-policy Always

    - name: Wait for Services to be Ready
      run: |
        sleep 60

    - name: Run Acceptance Tests (FQDNs on :8000)
      run: |
        CUSTOMER_FQDN=staging-customer-${{ github.run_id }}.${{ env.LOCATION }}.azurecontainer.io
        PRODUCT_FQDN=staging-product-${{ github.run_id }}.${{ env.LOCATION }}.azurecontainer.io
        ORDER_FQDN=staging-order-${{ github.run_id }}.${{ env.LOCATION }}.azurecontainer.io
        FRONTEND_FQDN=staging-frontend-${{ github.run_id }}.${{ env.LOCATION }}.azurecontainer.io

        curl -f http://$CUSTOMER_FQDN:8000/health
        curl -f http://$PRODUCT_FQDN:8000/health
        curl -f http://$ORDER_FQDN:8000/health
        curl -f http://$FRONTEND_FQDN

        echo "Frontend: http://$FRONTEND_FQDN"
        echo "Customer: http://$CUSTOMER_FQDN:8000"
        echo "Product : http://$PRODUCT_FQDN:8000"
        echo "Order   : http://$ORDER_FQDN:8000"

    - name: Cleanup Staging Infrastructure
      if: always()
      run: |
        az group delete --name ${{ env.STAGING_RESOURCE_GROUP }} --yes --no-wait
