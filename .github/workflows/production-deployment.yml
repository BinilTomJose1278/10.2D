name: Production Deployment Pipeline

on:
  push:
    branches: [ main ]

env:
  AZURE_CONTAINER_REGISTRY: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
  REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

jobs:
  deploy-to-production:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

       - name: Deploy to Production (all on :8000 with DNS)
      shell: bash
      run: |
        set -euo pipefail

        rg="${{ env.AZURE_RESOURCE_GROUP }}"
        acr="${{ env.AZURE_CONTAINER_REGISTRY }}"
        acr_user="${{ env.REGISTRY_USERNAME }}"
        acr_pass="${{ env.REGISTRY_PASSWORD }}"
        sha="${{ github.sha }}"

        # helper: delete if exists (idempotent)
        del_if_exists () {
          local name="$1"
          if az container show -g "$rg" -n "$name" >/dev/null 2>&1; then
            echo "Deleting existing container group: $name"
            az container delete -g "$rg" -n "$name" -y
            # wait until gone to free the DNS label
            while az container show -g "$rg" -n "$name" >/dev/null 2>&1; do
              echo "Waiting for $name to be removed..."
              sleep 5
            done
          fi
        }

        # --- RabbitMQ ---
        del_if_exists production-rabbitmq
        az container create \
          --resource-group "$rg" \
          --name production-rabbitmq \
          --image rabbitmq:3-management \
          --ports 5672 15672 \
          --cpu 1 --memory 1 \
          --os-type Linux \
          --ip-address Public \
          --dns-name-label btj-rmq-aue \
          --restart-policy Always

        # --- PRODUCT (port 8000 + DNS) ---
        del_if_exists production-product-service
        az container create \
          --resource-group "$rg" \
          --name production-product-service \
          --image "$acr/product-service:$sha" \
          --ports 8000 \
          --cpu 1 --memory 1.5 \
          --os-type Linux \
          --ip-address Public \
          --dns-name-label btj-product-svc-aue \
          --environment-variables \
            POSTGRES_USER=postgres \
            POSTGRES_DB=product_db \
            POSTGRES_HOST=${{ secrets.PRODUCTION_POSTGRES_HOST }} \
            POSTGRES_PORT=5432 \
            RABBITMQ_HOST=btj-rmq-aue.australiaeast.azurecontainer.io \
            RABBITMQ_PORT=5672 \
            RABBITMQ_USER=${{ secrets.PRODUCTION_RABBITMQ_USER }} \
          --secure-environment-variables \
            POSTGRES_PASSWORD=${{ secrets.PRODUCTION_POSTGRES_PASSWORD }} \
            RABBITMQ_PASS=${{ secrets.PRODUCTION_RABBITMQ_PASS }} \
          --registry-login-server "$acr" \
          --registry-username "$acr_user" \
          --registry-password "$acr_pass" \
          --restart-policy Always

        # --- CUSTOMER (port 8000 + DNS) ---
        del_if_exists production-customer-service
        az container create \
          --resource-group "$rg" \
          --name production-customer-service \
          --image "$acr/customer-service:$sha" \
          --ports 8000 \
          --cpu 1 --memory 1.5 \
          --os-type Linux \
          --ip-address Public \
          --dns-name-label btj-customer-svc-aue \
          --environment-variables \
            POSTGRES_USER=postgres \
            POSTGRES_DB=customer_db \
            POSTGRES_HOST=${{ secrets.PRODUCTION_POSTGRES_HOST }} \
            POSTGRES_PORT=5432 \
            RABBITMQ_HOST=btj-rmq-aue.australiaeast.azurecontainer.io \
            RABBITMQ_PORT=5672 \
            RABBITMQ_USER=${{ secrets.PRODUCTION_RABBITMQ_USER }} \
          --secure-environment-variables \
            POSTGRES_PASSWORD=${{ secrets.PRODUCTION_POSTGRES_PASSWORD }} \
            RABBITMQ_PASS=${{ secrets.PRODUCTION_RABBITMQ_PASS }} \
          --registry-login-server "$acr" \
          --registry-username "$acr_user" \
          --registry-password "$acr_pass" \
          --restart-policy Always

        # --- ORDER (port 8000 + DNS + service URLs) ---
        del_if_exists production-order-service
        az container create \
          --resource-group "$rg" \
          --name production-order-service \
          --image "$acr/order-service:$sha" \
          --ports 8000 \
          --cpu 1 --memory 1.5 \
          --os-type Linux \
          --ip-address Public \
          --dns-name-label btj-order-svc-aue \
          --environment-variables \
            POSTGRES_USER=postgres \
            POSTGRES_DB=order_db \
            POSTGRES_HOST=${{ secrets.PRODUCTION_POSTGRES_HOST }} \
            POSTGRES_PORT=5432 \
            RABBITMQ_HOST=btj-rmq-aue.australiaeast.azurecontainer.io \
            RABBITMQ_PORT=5672 \
            RABBITMQ_USER=${{ secrets.PRODUCTION_RABBITMQ_USER }} \
            PRODUCT_SERVICE_URL=http://btj-product-svc-aue.australiaeast.azurecontainer.io:8000 \
            CUSTOMER_SERVICE_URL=http://btj-customer-svc-aue.australiaeast.azurecontainer.io:8000 \
          --secure-environment-variables \
            POSTGRES_PASSWORD=${{ secrets.PRODUCTION_POSTGRES_PASSWORD }} \
            RABBITMQ_PASS=${{ secrets.PRODUCTION_RABBITMQ_PASS }} \
          --registry-login-server "$acr" \
          --registry-username "$acr_user" \
          --registry-password "$acr_pass" \
          --restart-policy Always

        # --- FRONTEND (DNS + :80) ---
        del_if_exists production-frontend
        az container create \
          --resource-group "$rg" \
          --name production-frontend \
          --image "$acr/frontend:$sha" \
          --ports 80 \
          --cpu 1 --memory 1 \
          --os-type Linux \
          --ip-address Public \
          --dns-name-label btj-frontend-aue \
          --registry-login-server "$acr" \
          --registry-username "$acr_user" \
          --registry-password "$acr_pass" \
          --restart-policy Always


    - name: Verify Production Deployment (FQDNs on :8000)
      run: |
        CUSTOMER_FQDN=$(az container show -g ${{ env.AZURE_RESOURCE_GROUP }} -n production-customer-service --query ipAddress.fqdn -o tsv)
        PRODUCT_FQDN=$(az container show -g ${{ env.AZURE_RESOURCE_GROUP }} -n production-product-service  --query ipAddress.fqdn -o tsv)
        ORDER_FQDN=$(az container show   -g ${{ env.AZURE_RESOURCE_GROUP }} -n production-order-service    --query ipAddress.fqdn -o tsv)
        FRONTEND_FQDN=$(az container show -g ${{ env.AZURE_RESOURCE_GROUP }} -n production-frontend       --query ipAddress.fqdn -o tsv)

        curl -f http://$CUSTOMER_FQDN:8000/health
        curl -f http://$PRODUCT_FQDN:8000/health
        curl -f http://$ORDER_FQDN:8000/health
        curl -f http://$FRONTEND_FQDN

        echo "Frontend: http://$FRONTEND_FQDN"
        echo "Customer: http://$CUSTOMER_FQDN:8000"
        echo "Product : http://$PRODUCT_FQDN:8000"
        echo "Order   : http://$ORDER_FQDN:8000"
