name: Production Deployment Pipeline

on:
  push:
    branches: [ main ]

env:
  AZURE_CONTAINER_REGISTRY: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
  REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

jobs:
  deploy-to-production:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Emergency Container Cleanup
      run: |
        echo "EMERGENCY CLEANUP: Deleting ALL containers to avoid quota issues..."
        
        # Get current container count
        CURRENT_COUNT=$(az container list --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "length(@)")
        echo "Current container count: $CURRENT_COUNT/10"
        
        # Delete ALL containers aggressively (not just production)
        echo "Deleting ALL containers in resource group..."
        az container list --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "[].name" -o tsv | while read container_name; do
          echo "Deleting container: $container_name"
          az container delete --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name $container_name --yes || true
        done
        
        # Wait longer for deletion to complete
        echo "Waiting 180 seconds for container deletion to complete..."
        sleep 180
        
        # Verify cleanup
        FINAL_COUNT=$(az container list --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "length(@)")
        echo "Final container count: $FINAL_COUNT/10"
        
        echo "Emergency container cleanup completed!"

    - name: Deploy to Production Environment (Sequential)
      run: |
        echo "Creating production containers sequentially to avoid quota issues..."
        
        # Create RabbitMQ first
        echo "Creating RabbitMQ container..."
        az container create \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name production-rabbitmq \
          --image rabbitmq:3-management \
          --os-type Linux \
          --ports 5672 15672 \
          --cpu 1 \
          --memory 1 \
          --ip-address public
        sleep 20
        
        # Create Customer Service
        echo "Creating Customer Service container (1/5)..."
        az container create \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name production-customer-service \
          --image ${{ env.AZURE_CONTAINER_REGISTRY }}/customer-service:latest \
          --os-type Linux \
          --ports 8002 \
          --environment-variables \
            POSTGRES_USER=btjcommerce \
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            POSTGRES_DB=customer_db \
            POSTGRES_HOST=btj-ecommerce-postgres.postgres.database.azure.com \
            POSTGRES_PORT=5432 \
          --cpu 2 \
          --memory 2 \
          --registry-login-server ${{ env.AZURE_CONTAINER_REGISTRY }} \
          --registry-username ${{ env.REGISTRY_USERNAME }} \
          --registry-password ${{ env.REGISTRY_PASSWORD }} \
          --ip-address public \
          --restart-policy Always
        echo "Customer Service created. Waiting 30 seconds before next container..."
        sleep 30

        # Create Product Service
        echo "Creating Product Service container (2/5)..."
        az container create \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name production-product-service \
          --image ${{ env.AZURE_CONTAINER_REGISTRY }}/product-service:latest \
          --os-type Linux \
          --ports 8001 \
          --environment-variables \
            POSTGRES_USER=btjcommerce \
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            POSTGRES_DB=product_db \
            POSTGRES_HOST=btj-ecommerce-postgres.postgres.database.azure.com \
            POSTGRES_PORT=5432 \
            RABBITMQ_HOST=production-rabbitmq \
            RABBITMQ_PORT=5672 \
            RABBITMQ_USER=guest \
            RABBITMQ_PASS=guest \
            AZURE_STORAGE_ACCOUNT_NAME=${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }} \
            AZURE_STORAGE_ACCOUNT_KEY=${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }} \
          --cpu 2 \
          --memory 2 \
          --registry-login-server ${{ env.AZURE_CONTAINER_REGISTRY }} \
          --registry-username ${{ env.REGISTRY_USERNAME }} \
          --registry-password ${{ env.REGISTRY_PASSWORD }} \
          --ip-address public \
          --restart-policy Always
        echo "Product Service created. Waiting 30 seconds before next container..."
        sleep 30

        # Create Order Service
        echo "Creating Order Service container (3/5)..."
        az container create \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name production-order-service \
          --image ${{ env.AZURE_CONTAINER_REGISTRY }}/order-service:latest \
          --os-type Linux \
          --ports 8003 \
          --environment-variables \
            POSTGRES_USER=btjcommerce \
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            POSTGRES_DB=order_db \
            POSTGRES_HOST=btj-ecommerce-postgres.postgres.database.azure.com \
            POSTGRES_PORT=5432 \
            CUSTOMER_SERVICE_URL=http://production-customer-service \
            RABBITMQ_HOST=production-rabbitmq \
            RABBITMQ_PORT=5672 \
            RABBITMQ_USER=guest \
            RABBITMQ_PASS=guest \
          --cpu 2 \
          --memory 2 \
          --registry-login-server ${{ env.AZURE_CONTAINER_REGISTRY }} \
          --registry-username ${{ env.REGISTRY_USERNAME }} \
          --registry-password ${{ env.REGISTRY_PASSWORD }} \
          --ip-address public \
          --restart-policy Always
        echo "Order Service created. Waiting 30 seconds before next container..."
        sleep 30

        # Create Frontend
        echo "Creating Frontend container (4/5)..."
        az container create \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name production-frontend \
          --image ${{ env.AZURE_CONTAINER_REGISTRY }}/frontend:latest \
          --os-type Linux \
          --ports 80 \
          --cpu 1 \
          --memory 1 \
          --registry-login-server ${{ env.AZURE_CONTAINER_REGISTRY }} \
          --registry-username ${{ env.REGISTRY_USERNAME }} \
          --registry-password ${{ env.REGISTRY_PASSWORD }} \
          --ip-address public \
          --restart-policy Always
        echo "Frontend created. Waiting 30 seconds before next container..."
        sleep 30
        
        echo "All production containers created successfully!"

    - name: Wait for Deployment
      run: |
        sleep 30
        echo "Waiting for services to be ready..."

    - name: Verify Production Deployment
      run: |
        # Get production service IPs
        CUSTOMER_IP=$(az container show \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name production-customer-service \
          --query ipAddress.ip -o tsv)
        
        PRODUCT_IP=$(az container show \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name production-product-service \
          --query ipAddress.ip -o tsv)
        
        ORDER_IP=$(az container show \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name production-order-service \
          --query ipAddress.ip -o tsv)
        
        FRONTEND_IP=$(az container show \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name production-frontend \
          --query ipAddress.ip -o tsv)

        # Test health endpoints
        curl -f http://$CUSTOMER_IP:8002/health || exit 1
        curl -f http://$PRODUCT_IP:8001/health || exit 1
        curl -f http://$ORDER_IP:8003/health || exit 1
        curl -f http://$FRONTEND_IP:80 || exit 1

        echo "Production deployment successful!"
        echo "Frontend URL: http://$FRONTEND_IP:80"
        echo "Customer Service: http://$CUSTOMER_IP:8002"
        echo "Product Service: http://$PRODUCT_IP:8001"
        echo "Order Service: http://$ORDER_IP:8003"

    - name: Send Deployment Notification
      run: |
        echo "Production deployment completed successfully for commit ${{ github.sha }}"
        echo "Services are now running the latest version"
